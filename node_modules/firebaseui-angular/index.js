import { Component, EventEmitter, Injectable, NgModule, Output } from '@angular/core';
import { CommonModule } from '@angular/common';
import { auth } from 'firebaseui';
import { AngularFireAuth } from 'angularfire2/auth';
import { auth as auth$2 } from 'firebase/app';

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var FirebaseUIService = /** @class */ (function () {
    function FirebaseUIService(angularFireAuth) {
        // store the firebaseui instance on the window object to prevent double initialization
        if (!(/** @type {?} */ (window)).firebaseUiInstance) {
            (/** @type {?} */ (window)).firebaseUiInstance = new auth.AuthUI(angularFireAuth.auth);
        }
        this.firebaseUiInstance = /** @type {?} */ ((/** @type {?} */ (window)).firebaseUiInstance);
    }
    FirebaseUIService.decorators = [
        { type: Injectable },
    ];
    /** @nocollapse */
    FirebaseUIService.ctorParameters = function () { return [
        { type: AngularFireAuth, },
    ]; };
    return FirebaseUIService;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
/*
 * Created by Raphael Jenni
 * Copyright (c) 2017 Raphael Jenni
 */
var FirebaseUIAuthConfig = /** @class */ (function () {
    function FirebaseUIAuthConfig() {
    }
    return FirebaseUIAuthConfig;
}());
var FirebaseUISignInSuccess = /** @class */ (function () {
    function FirebaseUISignInSuccess() {
    }
    return FirebaseUISignInSuccess;
}());
/** @enum {number} */
var CredentialHelper = {
    AccountChooser: 0,
    OneTap: 1,
    None: 2,
};
CredentialHelper[CredentialHelper.AccountChooser] = "AccountChooser";
CredentialHelper[CredentialHelper.OneTap] = "OneTap";
CredentialHelper[CredentialHelper.None] = "None";
/** @enum {number} */
var AuthProvider = {
    Google: 0,
    Facebook: 1,
    Twitter: 2,
    Github: 3,
    Password: 4,
    Phone: 5,
};
AuthProvider[AuthProvider.Google] = "Google";
AuthProvider[AuthProvider.Facebook] = "Facebook";
AuthProvider[AuthProvider.Twitter] = "Twitter";
AuthProvider[AuthProvider.Github] = "Github";
AuthProvider[AuthProvider.Password] = "Password";
AuthProvider[AuthProvider.Phone] = "Phone";
/**
 * @record
 */

/** @enum {number} */
var AuthMethods = {
    Popup: 0,
    Redirect: 1,
};
AuthMethods[AuthMethods.Popup] = "Popup";
AuthMethods[AuthMethods.Redirect] = "Redirect";

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var GoogleAuthProvider = auth$2.GoogleAuthProvider;
var FacebookAuthProvider = auth$2.FacebookAuthProvider;
var TwitterAuthProvider = auth$2.TwitterAuthProvider;
var GithubAuthProvider = auth$2.GithubAuthProvider;
var EmailAuthProvider = auth$2.EmailAuthProvider;
var PhoneAuthProvider = auth$2.PhoneAuthProvider;
var FirebaseUIComponent = /** @class */ (function () {
    function FirebaseUIComponent(angularFireAuth, firebaseUiConfig, firebaseUIService) {
        this.angularFireAuth = angularFireAuth;
        this.firebaseUiConfig = firebaseUiConfig;
        this.firebaseUIService = firebaseUIService;
        this.signInSuccessCallback = new EventEmitter();
    }
    /**
     * @param {?} provider
     * @return {?}
     */
    FirebaseUIComponent.getAuthProvider = /**
     * @param {?} provider
     * @return {?}
     */
    function (provider) {
        switch (provider) {
            case AuthProvider.Google:
                return GoogleAuthProvider.PROVIDER_ID;
            case AuthProvider.Facebook:
                return FacebookAuthProvider.PROVIDER_ID;
            case AuthProvider.Twitter:
                return TwitterAuthProvider.PROVIDER_ID;
            case AuthProvider.Github:
                return GithubAuthProvider.PROVIDER_ID;
            case AuthProvider.Password:
                return EmailAuthProvider.PROVIDER_ID;
            case AuthProvider.Phone:
                return PhoneAuthProvider.PROVIDER_ID;
        }
    };
    /**
     * @return {?}
     */
    FirebaseUIComponent.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.subscription = this.angularFireAuth.authState.subscribe(function (value) {
            if (!value) {
                if (_this.firebaseUiConfig.providers.length !== 0) {
                    _this.firebaseUIPopup();
                }
                else {
                    throw new Error('There must be at least one AuthProvider.');
                }
            }
        });
    };
    /**
     * @return {?}
     */
    FirebaseUIComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        if (!!this.subscription) {
            this.subscription.unsubscribe();
        }
    };
    /**
     * @param {?} authConfig
     * @return {?}
     */
    FirebaseUIComponent.prototype.getUIAuthConfig = /**
     * @param {?} authConfig
     * @return {?}
     */
    function (authConfig) {
        var _this = this;
        var /** @type {?} */ authProviders = [];
        for (var _i = 0, _a = authConfig.providers; _i < _a.length; _i++) {
            var provider = _a[_i];
            if (!!(/** @type {?} */ (provider)).customConfig) {
                provider = (/** @type {?} */ (provider));
                var /** @type {?} */ providerWithConfig = provider.customConfig;
                providerWithConfig['provider'] = FirebaseUIComponent.getAuthProvider(provider.provider);
                authProviders.push(providerWithConfig);
            }
            else {
                authProviders.push(FirebaseUIComponent.getAuthProvider(/** @type {?} */ (provider)));
            }
        }
        var /** @type {?} */ tosURL = authConfig.tos ? authConfig.tos : '';
        var /** @type {?} */ authMethod = 'popup';
        switch (authConfig.method) {
            case null:
            case AuthMethods.Popup:
                break;
            case AuthMethods.Redirect:
                authMethod = 'redirect';
                break;
            default:
                throw new Error("Unknown auth method. Valid: [AuthMethods.Popup, AuthMethods.Redirect]");
        }
        var /** @type {?} */ credentialHelper;
        switch (authConfig.credentialHelper) {
            case CredentialHelper.None:
                credentialHelper = auth.CredentialHelper.NONE;
                break;
            case CredentialHelper.OneTap:
                credentialHelper = auth.CredentialHelper.GOOGLE_YOLO;
                break;
            case CredentialHelper.AccountChooser:
            default:
                credentialHelper = auth.CredentialHelper.ACCOUNT_CHOOSER_COM;
                break;
        }
        var /** @type {?} */ nativeConfiguration = {
            callbacks: {
                signInSuccess: function (currentUser, credential, redirectUrl) {
                    _this.signInSuccessCallback.emit({
                        currentUser: currentUser,
                        credential: credential,
                        redirectUrl: redirectUrl
                    });
                    return !!authConfig.signInSuccessUrl;
                }
            },
            signInFlow: authMethod,
            signInOptions: authProviders,
            tosUrl: tosURL,
            credentialHelper: credentialHelper
        };
        if (!!authConfig.signInSuccessUrl) {
            nativeConfiguration.signInSuccessUrl = authConfig.signInSuccessUrl;
        }
        return nativeConfiguration;
    };
    /**
     * @return {?}
     */
    FirebaseUIComponent.prototype.firebaseUIPopup = /**
     * @return {?}
     */
    function () {
        var /** @type {?} */ firebaseUiInstance = this.firebaseUIService.firebaseUiInstance;
        firebaseUiInstance.start('#firebaseui-auth-container', this.getUIAuthConfig(this.firebaseUiConfig));
    };
    FirebaseUIComponent.decorators = [
        { type: Component, args: [{
                    selector: 'firebase-ui',
                    template: "\n        <div id=\"firebaseui-auth-container\"></div>"
                },] },
    ];
    /** @nocollapse */
    FirebaseUIComponent.ctorParameters = function () { return [
        { type: AngularFireAuth, },
        { type: FirebaseUIAuthConfig, },
        { type: FirebaseUIService, },
    ]; };
    FirebaseUIComponent.propDecorators = {
        "signInSuccessCallback": [{ type: Output, args: ['signInSuccess',] },],
    };
    return FirebaseUIComponent;
}());

/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes} checked by tsc
 */
var FirebaseUIModule = /** @class */ (function () {
    function FirebaseUIModule() {
    }
    /**
     * @param {?} firebaseUiAuthConfig
     * @return {?}
     */
    FirebaseUIModule.forRoot = /**
     * @param {?} firebaseUiAuthConfig
     * @return {?}
     */
    function (firebaseUiAuthConfig) {
        return {
            ngModule: FirebaseUIModule,
            providers: [
                { provide: FirebaseUIAuthConfig, useValue: firebaseUiAuthConfig }
            ]
        };
    };
    FirebaseUIModule.decorators = [
        { type: NgModule, args: [{
                    imports: [
                        CommonModule
                    ],
                    declarations: [
                        FirebaseUIComponent,
                    ],
                    exports: [
                        FirebaseUIComponent,
                    ],
                    providers: [
                        FirebaseUIService
                    ]
                },] },
    ];
    /** @nocollapse */
    FirebaseUIModule.ctorParameters = function () { return []; };
    return FirebaseUIModule;
}());

export { FirebaseUIModule, FirebaseUIComponent, FirebaseUIService, FirebaseUIAuthConfig, FirebaseUISignInSuccess, CredentialHelper, AuthProvider, AuthMethods };
